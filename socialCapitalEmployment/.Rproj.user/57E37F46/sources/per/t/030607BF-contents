library(shiny)
library(leaflet)
library(tidyverse)
library(ggplot2)
library(sf)
library(shiny)
library(tigris)
library(echarts4r)
library(fullPage)

# leaving off: get map to select "social cap", fix map legend by BINNING VALUES and add PCA tabs and predictions?
# https://towardsdatascience.com/how-to-use-r-shiny-for-eda-and-prediction-72e6ef842240
# https://aneesha.medium.com/timeseries-forecasting-with-the-forecast-r-package-and-shiny-6fa04c64196 <- may be helpful?
# https://predictivehacks.com/how-to-share-your-machine-learning-models-with-shiny/
employment <- read_csv("../final_version/timeseries.csv")
# data loading and processing
USA <- st_read(dsn = '../OECD/cb_2018_us_county_5m.shp')
counties_sf <- st_as_sf(USA)
counties_reproject_sf <-
  st_transform(counties_sf, 4326) %>% filter(COUNTYFP < 60010)
social_indices <- read_tsv("../capturing-dataset.tsv")
drops <- c("geoid", 'bridging', 'bonding', 'linking')
social_indices <-
  social_indices[,!(names(social_indices) %in% drops)]
social_indices$fips_n <- sprintf("%05d", social_indices$fips_n)
social_indices <-
  social_indices[, c(
    "fips_n",
    "countyname",
    "socialcap",
    "religion" ,
    "civic",
    "charitable",
    "fraternal",
    "union",
    "voteage",
    "local",
    "state",
    "federal",
    "politicalacts",
    "ethnic",
    "ethnichpn",
    "education",
    "incomeequal",
    "employ",
    "genderincome",
    "language",
    "commu",
    "nonelder"
  )]
social_indices <- pivot_longer(social_indices, cols = 3:22)
# merge shape file with data
states_sf_coef  <-
  geo_join(counties_reproject_sf, social_indices, "GEOID", "fips_n", how =
             'inner')
cut_borders <- function(x) {
  pattern <-
    "(\\(|\\[)(-*[0-9]+\\.*[0-9]*),(-*[0-9]+\\.*[0-9]*)(\\)|\\])"
  start <- as.numeric(gsub(pattern, "\\2", x))
  end <- as.numeric(gsub(pattern, "\\3", x))
  sort(unique(c(start, end)))
}

ui <- pagePiling(
  center = TRUE,
  sections.color = c("#3333FF", "#E6E6E6"),
  menu = c(
    "Home" = "home",
    "Map" = "map",
    "Series" = "ts",
    "PCA" = "pca",
    "Predict" = "predict",
    "About" = "about"
  ),
  pageSectionImage(
    center = TRUE,
    img = "https://allthatsinteresting.com/wordpress/wp-content/uploads/2015/09/human-tower-competition-close-up.jpg",
    menu = "home",
    h1("Social Capital: Recoverying from COVID-19", style = "font-family:'Canonical'; color:#000000; text-align: center; font-size:100px"),
    h3(
      class = "light footer",
      "by",
      tags$a("news-r", href = "https://news-r.org", class = "link")
    )
  ),
  pageSection(
    h1("Employment & Social Capital by County"),
    center = TRUE,
    menu = "map",
    fluidRow(
      h2("Social Capital across the U.S."),
      column(9, leafletOutput("map", height = "100vh")),
      column(
        3,
        shinyWidgets::radioGroupButtons(
          inputId = "idx",
          label = "Social Indice",
          choices = c(unique(social_indices$name)),
          checkIcon = list(yes = icon("ok", lib = "glyphicon"))
        )
      )
    )
  ),
  pageSection(menu = "ts",
              sidebarLayout(
                sidebarPanel(
                  selectizeInput(
                    inputId = "dataset",
                    label = "Choose a county:",
                    choices = c(unique(employment["countyfips"])),
                    multiple = TRUE,
                    selected = "Travis County, Texas",
                    options = list(create = TRUE)
                  )
                ),
                mainPanel(echarts4r::echarts4rOutput("ts_plot"),
                          verbatimTextOutput("summary"))
              )),
  pageSection(
    h1("Principal Components"),
    center = TRUE,
    menu = "pca",
    fluidRow(
      h3(
        "religion and nonelder both have stronger, albeit contrasting, effects on PC1"
      ),
      h3(
        "language and local have the strongest, and again contrasting, effects on PC2"
      ),
      column(9),
      column(3),
    )
  ),
  pageSection(
    h1("Predictions"),
    center = TRUE,
    menu = "predict",
    sidebarLayout(
      selectizeInput(
        inputId = "dataset",
        label = "Choose a county:",
        choices = c(unique(employment["countyfips"])),
        multiple = TRUE,
        selected = "Travis County, Texas",
        options = list(create = TRUE)
      ),
      mainPanel(plotOutput("ts_plot"),
                verbatimTextOutput("summary"))
    )
  ),
  # fullSectionImage(
  #   img = paste0(
  #     "https://allthatsinteresting.com/wordpress/wp-content/uploads/2015/09/human-tower-competition-close-up.jpg"),
  #   h3(
  #     class = "light footer",
  #     "by", tags$a("OECD", href = "https://www.oecd.org/insights/37966934.pdf", class = "link")
  #   )
  # )
)

server <- function(input, output, session) {
  # output$title <- typed::renderTyped({
  #   typed::typed(c("Social Capital & Employment by County^1000", "Social Capital^500<br>Recovering from COVID"), typeSpeed = 25, smartBackspace = TRUE)
  # })
  
  ## TIMESERIRES
  # get user input to select county
  datasetInput <- reactive({
    employment %>% dplyr::filter(countyfips == input$dataset)
    
  })
  # generate summary of county emp_incbelowmed metrics
  output$summary <- renderPrint({
    dataset <- datasetInput()
    summary(dataset$emp_incbelowmed)
  })
  
  # "infographic", "vintage", "chalk"
  echarts4r::e_common(font_family = "Playfair Display", theme = "walden")
  
  # plot time series
  output$ts_plot <- echarts4r::renderEcharts4r({
    dataset <- datasetInput()
    
    dataset %>%
      dplyr::arrange(date) %>%
      dplyr::group_by(countyfips) %>%
      e_charts(x = date) %>%
      echarts4r::e_line(emp_incbelowmed, symbol = 'none') %>%
      echarts4r::e_tooltip(trigger = "axis") %>%
      echarts4r::e_axis_labels("Days")
  })
  
  ## LEAFLET
  geoDatasetInput <- reactive({
    states_sf_coef %>% dplyr::filter(name == input$idx)
  })
  #Sortie map --> # BINS VALUES
  output$map <- renderLeaflet({
    data <- geoDatasetInput()
    bins <- cut(as.vector(data$value), 8, include.lowest = TRUE)
    mypal <-
      colorBin("YlOrRd", domain = data$value, bins = cut_borders(bins))
    leaflet() %>%
      addProviderTiles("OpenStreetMap.Mapnik") %>%
      setView(lat = 39.8283,
              lng = -98.5795,
              zoom = 4) %>%
      addPolygons(
        data = data,
        fillColor = ~ mypal(data$value),
        stroke = FALSE,
        smoothFactor = 0.2,
        fillOpacity = 0.3,
        popup = paste(
          "Region: ",
          data$countyname,
          "<br>",
          "Social Index: ",
          data$value,
          "<br>"
        )
      ) %>%
      addLegend(
        position = "bottomleft",
        pal = mypal,
        values = data$value,
        title = input$idx,
        opacity = 1
      )
  })
}
shinyApp(ui, server)